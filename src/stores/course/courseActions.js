// stores/course/courseActions.js
import { updateEnrollmentStatusAction, setEnrolledCoursesAction } from './index';
import { LocalStorage, keyLocalStorage } from '../../ultil/localStorage';
import { courseService } from '../../service/courseService';

export const enrollCourseAction = (maKhoaHoc) => {
  return async (dispatch) => {
    try {
      // L·∫•y th√¥ng tin user t·ª´ localStorage
      const userInfo = LocalStorage.get(keyLocalStorage.INFO_USER);
      
      if (!userInfo || !userInfo.taiKhoan) {
        throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc');
      }

      const data = {
        maKhoaHoc: maKhoaHoc,
        taiKhoan: userInfo.taiKhoan
      };

      console.log('üîÑ ƒêang ƒëƒÉng k√Ω kh√≥a h·ªçc:', data);

      // G·ªçi API ƒëƒÉng k√Ω
      const response = await courseService.enrollCourse(data);
      
      if (response.status === 200) {
        console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', response.data);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
        dispatch(updateEnrollmentStatusAction({
          courseId: maKhoaHoc,
          status: 'enrolled'
        }));
        
        // C·∫≠p nh·∫≠t danh s√°ch kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
        await dispatch(fetchEnrolledCourses());
        
        return { 
          success: true, 
          data: response.data,
          message: 'ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng!' 
        };
      }
    } catch (error) {
      console.error('‚ùå L·ªói ƒëƒÉng k√Ω kh√≥a h·ªçc:', error);
      
      let errorMessage = 'ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
      
      if (error.response) {
        if (error.response.status === 400) {
          errorMessage = 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y tr∆∞·ªõc ƒë√≥.';
        } else if (error.response.status === 401) {
          errorMessage = 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc.';
        } else if (error.response.data && error.response.data.content) {
          errorMessage = error.response.data.content;
        }
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i
      dispatch(updateEnrollmentStatusAction({
        courseId: maKhoaHoc,
        status: 'error'
      }));
      
      throw new Error(errorMessage); // N√©m l·ªói ƒë·ªÉ component b·∫Øt
    }
  };
};

// Fetch enrolled courses - C·∫¢I TI·∫æN
// Action l·∫•y danh s√°ch kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
export const fetchEnrolledCourses = () => {
  return async (dispatch) => {
    const userInfo = LocalStorage.get(keyLocalStorage.INFO_USER);
    if (!userInfo || !userInfo.taiKhoan) {
      dispatch(setEnrolledCoursesAction([]));
      return;
    }
    try {
      const response = await courseService.getEnrolledCourses(userInfo.taiKhoan);
      if (response.data && Array.isArray(response.data)) {
        dispatch(setEnrolledCoursesAction(response.data));
      } else {
        dispatch(setEnrolledCoursesAction([]));
      }
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω:', error);
      dispatch(setEnrolledCoursesAction([]));
    }
  };
};

// Action ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng k√Ω
export const checkEnrollmentStatus = (maKhoaHoc) => {
  return async (dispatch) => {
    try {
      const userInfo = LocalStorage.get(keyLocalStorage.INFO_USER);
      
      if (!userInfo || !userInfo.taiKhoan) {
        return;
      }

      const response = await courseService.checkEnrollment(maKhoaHoc, userInfo.taiKhoan);
      
      dispatch(updateEnrollmentStatusAction({
        courseId: maKhoaHoc,
        status: response.data ? 'enrolled' : 'not_enrolled'
      }));
    } catch (error) {
      console.error('‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng k√Ω:', error);
    }
  };
};